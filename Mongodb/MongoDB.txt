Q1.
db.Food_items.insertMany([
  {
    "name": "Chocolate Chip Cookie",
    "calories": 250,
    "brand": "SweetTreats",
    "category": "snack",
    "price": 1.99
  },
  {
    "name": "Orange Juice",
    "calories": 110,
    "brand": "FreshSqueeze",
    "category": "juices",
    "price": 3.50
  },
  {
    "name": "Grilled Chicken Meal",
    "calories": 600,
    "brand": "HealthyEats",
    "category": "meals",
    "price": 12.99
  },
  {
    "name": "Potato Chips",
    "calories": 150,
    "brand": "CrunchySnacks",
    "category": "snack",
    "price": 2.49
  }
 
]

)
db.Food.items.insertOne( {
    "name": "Mango Smoothie",
    "calories": 180,
    "brand": "TropicalDelight",
    "category": "juices",
    "price": 4.25
  })
db.Food.items.insertOne( {
    "name": "Mango Smoothie",
    "calories": 180,
    "brand": "TropicalDelight",
    "category": "juices",
    "price": 4.25
  })

db.restaurent.insertMany([
  {
    "name": "Snack Shack",
    "year": 2015,
    "location": "123 Main St",
    "contact": "555-1234",
    "email": "info@snackshack.com",
    "nos_of_days_open": 6,
    "city": "Chennai",
    "category": "snack",
    "serving": "takeaway"
  },
  {
    "name": "Juice Junction",
    "year": 2018,
    "location": "456 Elm St",
    "contact": "555-5678",
    "email": "contact@juicejunction.com",
    "nos_of_days_open": 7,
    "city": "Mumbai",
    "category": "juices",
    "serving": "dining"
  },
  {
    "name": "Meal Masters",
    "year": 2012,
    "location": "789 Oak St",
    "contact": "555-8765",
    "email": "hello@mealmasters.com",
    "nos_of_days_open": 5,
    "city": "Mumbai",
    "category": "meals",
    "serving": "buffet"
  }
  
]
)
db.restaurent.insertOne({
    "name": "Snack Haven",
    "year": 2020,
    "location": "321 Maple Ave",
    "contact": "555-4321",
    "email": "support@snackhaven.com",
    "nos_of_days_open": 7,
    "city": "Delhi",
    "category": "snack",
    "serving": "dining"
  })
db.restaurent.insertOne({
    "name": "Juice World",
    "year": 2019,
    "location": "654 Pine St",
    "contact": "555-6789",
    "email": "sales@juiceworld.com",
    "nos_of_days_open": 6,
    "city": "Delhi",
    "category": "juices",
    "serving": "takeaway"
  })

Q2.
 db.Food_items.find({"category":"juices"})

Q3.
 db.restaurent.find({"city":{$in:["Delhi","Mumbai"]}})

Q4.
db.Food_items.updateOne({"category":"snack:},{$set:{"price":3.00}} or db.Food_items.updateOne({ $and: [ { "category": "snack" }, { "name": "Orange Juice" } ] }, { $set: { price: 3.00 } })

Q5.
db.restaurent.updateMany({{ "city":"Delhi" }, { $set: { "location": "testing"} })

Q6.
db.Food_items.deleteMany({ $or: [{"brand":"FreshSqueeze"},{"category":"juices"}]})



-------------------------------------------------------------------
Q1. Find all products with price greater than or equal to 1000
db.products.aggregate({$match: {"price":{$gte: 1000}}})

Q2. Count total number of products in each category.
db.products.aggregate([
  {$group: {_id: "$category", totalProducts: {$sum: 1}}}
])

Q3. Get the maximum and minimum price of products in each category.
db.products.aggregate([
  {$group: {_id: "$category", maxPrice: {$max: "$price"}, minPrice: {$min: "$price"}}}
])

Q4. Find top 3 most expensive products (name & price only).
db.products.aggregate([{$sort:{price:-1}},{$project:{_id:-1,name:1,price:1}},{$limit:3}]);

Q5. Get the average price of products supplied by each supplier country.
db.products.aggregate([
  {$group: {"_id": "$supplier.country", avgPrice: {$avg: "$price"}}}
])

Q6. Count how many products have stock less than or equal to 10.
db.products.aggregate([
  { $match: { stock: { $lte: 10 } } },  
  { $count: "count" }                   
])

Q7. Find total stock value (price × stock) of each category. ( complex and tricky)
db.products.aggregate([
  {
    $project: {
      tvalue: { $multiply: ["$price", "$stock"] },
      category: 1}},
  {
    $group: {
      _id: "$category",
      tsum: { $sum: "$tvalue" }
    }
  }
])

Q8. Get the most recent 5 products added (sorted by createdAt).

db.products.aggregate([
  {
"$sort":{"createdAt":-1}

},{$limit:5}])

Q9. Find all categories having more than 2 products.
db.products.aggregate([
{$group:{_id:"$category",productCount:{$sum:1}}},
{$match:{productCount:{$gt:2}}}
])

Q10. Get the top 2 categories with the highest total revenue (price × stock).
db.products.aggregate([
{$group:{_id:"$category",totalRevenue:{$sum:{$multiply:["$price","$stock"]}}}},
{$sort:{totalRevenue:-1}},
{$limit:2}
])

Q11. Find the top-rated product in each category (based on average rating).
db.products.aggregate([
{$addFields:{avgRating:{$avg:"$ratings.score"}}},
{$sort:{avgRating:-1}},
{$group:{_id:"$category",topProduct:{$first:"$name"},avgRating:{$first:"$avgRating"}}}
])







